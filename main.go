package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"strings"
	"unicode"

	"ariga.io/atlas/schemahcl"
	"ariga.io/atlas/sql/mysql"
	"ariga.io/atlas/sql/schema"
	"github.com/hashicorp/hcl/v2/hclparse"
	"github.com/zclconf/go-cty/cty"
)

var (
	// inject by ldflags
	BuildVersion   = ""
	BuildRevision  = ""
	BuildTimestamp = ""
)

func main() {
	log.SetPrefix("atlas-hcl-gen-go: ")
	log.SetFlags(0)

	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	b, err := os.ReadFile("testdata/schema.hcl")
	if err != nil {
		return err
	}

	var s schema.Schema
	ev := mysql.EvalHCL
	if err := hclBytesFunc(ev)(b, &s, nil); err != nil {
		return err
	}

	buf := new(bytes.Buffer)
	for i := range s.Tables {
		table := s.Tables[i]
		fmt.Fprintf(buf, "type %s struct {\n", toCamelCase(table.Name))
		// fmt.Printf("%+v\n", table)
		for j := range table.Columns {
			column := table.Columns[j]
			fmt.Fprintf(buf, "\t%s int64 `json:\"%s\"`\n", toCamelCase(column.Name), column.Name)
			// fmt.Printf("  %+v\n", table.Columns[j])
		}
		fmt.Fprintf(buf, "}\n")
	}

	fmt.Fprintf(os.Stdout, "// Code generated by github.com/ucpr/atlas-hcl-gen-go. DO NOT EDIT.\n")
	fmt.Fprintf(os.Stdout, "// atlas-hcl-gen-go: %s\n", BuildVersion)
	fmt.Fprintf(os.Stdout, "// source: %s\n\n", "source")
	fmt.Fprintf(os.Stdout, "package main\n\n")
	fmt.Fprintln(os.Stdout, buf.String())

	return nil
}

func toCamelCase(s string) string {
	var result strings.Builder
	upperNext := true

	for _, r := range s {
		if !unicode.IsLetter(r) {
			upperNext = true
			continue
		}
		if upperNext {
			result.WriteRune(unicode.ToUpper(r))
			upperNext = false
		} else {
			result.WriteRune(r)
		}
	}

	// handle the first character of lower camel case
	if len(s) > 0 && unicode.IsLower(rune(s[0])) {
		resultString := result.String()
		return string(unicode.ToUpper(rune(resultString[0]))) + resultString[1:]
	}

	return result.String()
}

// original code: https://github.com/ariga/atlas/blob/98bb7b9da852536523121754d19570c506ba69f7/sql/internal/specutil/spec.go#L165...L173
func hclBytesFunc(ev schemahcl.Evaluator) func(b []byte, v any, inp map[string]cty.Value) error {
	return func(b []byte, v any, inp map[string]cty.Value) error {
		parser := hclparse.NewParser()
		if _, diag := parser.ParseHCL(b, ""); diag.HasErrors() {
			return diag
		}
		return ev.Eval(parser, v, inp)
	}
}
